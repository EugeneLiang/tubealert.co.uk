# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tubealert

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
#  role: TubeAlertLambdaRole

  stage: api
  region: eu-west-2

  environment:
    TFL_APP_ID: ${env:TFL_APP_ID}
    TFL_APP_KEY: ${env:TFL_APP_KEY}
    GCM_API_KEY: ${env:GCM_API_KEY}
    BUCKET_NAME: ${env:BUCKET_NAME}
    CONTACT_EMAIL: ${env:CONTACT_EMAIL}
    STATIC_HOST: ${env:STATIC_HOST}
    PRIVATE_KEY: ${env:PRIVATE_KEY}
    PUBLIC_KEY: ${env:PUBLIC_KEY}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

  # you can define service wide environment variables here


functions:
  webapp:
    handler: handler.webapp
    events:
      - http:
          path: /
          method: get

  latest:
    handler: handler.latest
    events:
      - http:
          path: /latest
          method: get

  subscribe:
    handler: handler.subscribe
    events:
      - http:
          path: /subscribe
          method: post

  unsubscribe:
    handler: handler.unsubscribe
    events:
      - http:
          path: /unsubscribe
          method: post

  fetch:
      handler: handler.fetch
      events:
        - schedule: rate(2 minutes)

  hourly:
        handler: handler.hourly
        events:
          - schedule: cron(1 * * * ? *)

  notify:
        handler: handler.notify
        events:
          - stream:
            type: dynamodb
            arn: arn:aws:dynamodb:eu-west-2:323441517494:table/tubealert.co.uk_notifications/stream/2017-04-15T10:21:10.286
            batchSize: 1
            startingPosition: LATEST
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

#resources:
#  Resources:
#    TubeAlertLambdaRole:
#      Type: AWS::IAM::Role
#      Properties:
#        RoleName: TubeAlertLambdaRole
#        AssumeRolePolicyDocument:
#          Version: '2017'
#          Statement:
#            - Effect: Allow
#              Principal:
#                Service:
#                  - lambda.amazonaws.com
#              Action: sts:AssumeRole
#        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
#        ManagedPolicyArns:
#          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
#        Policies:
#          - PolicyName: myPolicyName
#            PolicyDocument:
#              Version: '2017'
#              Statement:
#                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
#                  Action:
#                    - logs:CreateLogGroup
#                    - logs:CreateLogStream
#                    - logs:PutLogEvents
#                  Resource:
#                    - 'Fn::Join':
#                      - ':'
#                      -
#                        - 'arn:aws:logs'
#                        - Ref: 'AWS::Region'
#                        - Ref: 'AWS::AccountId'
#                        - 'log-group:/aws/lambda/*:*:*'
#                -  Effect: "Allow"
#                   Action:
#                     - "dynamodb:ListBucket"
#                     - "dynamodb:BatchGetItem"
#                     - "dynamodb:BatchWriteItem"
#                     - "dynamodb:DeleteItem"
#                     - "dynamodb:DescribeStream"
#                     - "dynamodb:GetItem"
#                     - "dynamodb:GetRecords"
#                     - "dynamodb:GetShardIterator"
#                     - "dynamodb:ListStreams"
#                     - "dynamodb:ListTables"
#                     - "dynamodb:PutItem"
#                     - "dynamodb:Query"
#                     - "dynamodb:Scan"
#                     - "dynamodb:UpdateItem"
#                   Resource: "*"

package:
  exclude:
    - infrastructure/**
    - site/**
    - tests/**